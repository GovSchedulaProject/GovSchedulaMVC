@using GovSchedulaWeb.Models.Data.ViewModels
@model DepartmentSelectViewModel
@{
    ViewData["Title"] = "Book Appointment";
    var disabledServices = new List<string>
    {
        "Passport Renewal",
        "Lost/Damaged Replacement",
        "New Registration",
        "New Driver's License",
        "License Renewal",
        "Vehicle Registration",
        "New Registration",
        "Membership Renewal",
        "File Tax Returns"
    };
}

<div class="hero">
    <h1 class="heroTitle">Book Government Appointment</h1>
    <p class="heroSubtitle">
        Select a department and book an appointment with ease
    </p>
</div>

<div class="contentSection">
    <div class="container">
        <h2 class="sectionTitle">Departments</h2>
        <div class="departmentGrid">
            @foreach (var dept in Model.Departments)
            {
                <div class="departmentCard">
                    <img src="@Url.Content(dept.LogoUrl)" alt="@dept.Name" class="cardLogo" />
                    <div class="cardContent">
                        <h3 class="cardTitle">@dept.Name</h3>
                        <p class="cardHours">@dept.Hours</p>
                    </div>
                    <button class="bookButton"
                            data-dept-id="@dept.Id"
                            data-dept-name="@dept.Name">
                        Book Appointment
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<div class="backdrop" id="serviceModalBackdrop" style="display: none;">
    <div class="modal" id="serviceModal">
        <div class="modalHeader">
            <h2 class="modalTitle" id="modalDeptName">Department Name</h2>
            <button class="closeButton" id="modalCloseButton">&times;</button>
        </div>
        <div class="modalBody">
            <h3 class="modalSubtitle">Select a Service</h3>
            <div class="serviceList" id="modalServiceList">
                </div>
        </div>
    </div>
</div>

<div id="departmentsData" style="display: none;">
@foreach (var dept in Model.Departments)
{
    <div id="dept-@dept.Id">
        @foreach (var service in dept.Services)
        {
                var isDisabled = disabledServices.Contains(service.Name);

                @if (isDisabled)
                {
                    <a href="#"
                       data-name="@service.Name"
                       data-disabled="true"
                       class="disabled-service"></a>
                }
                else
                {
                    <a href="@service.Link" data-name="@service.Name"></a>
                }
        }
    </div>
}
</div>


@section Scripts {
    <script src="~/js/departments.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Wait a bit to ensure departments.js has loaded
            setTimeout(function() {
                const modalBackdrop = document.getElementById('serviceModalBackdrop');
                const modal = document.getElementById('serviceModal');
                const modalDeptName = document.getElementById('modalDeptName');
                const modalServiceList = document.getElementById('modalServiceList');
                const modalCloseButton = document.getElementById('modalCloseButton');
                const departmentsDataContainer = document.getElementById('departmentsData');

                // Get all book buttons
                const bookButtons = document.querySelectorAll('.bookButton');

                // Remove existing event listeners by cloning buttons
                bookButtons.forEach(button => {
                    const newButton = button.cloneNode(true);
                    button.parentNode.replaceChild(newButton, button);
                });

                // Re-attach event listeners with disabled service logic
                const newBookButtons = document.querySelectorAll('.bookButton');
                newBookButtons.forEach(button => {
                    button.addEventListener('click', function () {
                        const deptId = this.getAttribute('data-dept-id');
                        const deptName = this.getAttribute('data-dept-name');

                        // Clear previous services
                        modalServiceList.innerHTML = '';

                        // Set department name
                        modalDeptName.textContent = deptName;

                        // Find the hidden service data for this department
                        const deptDataElement = departmentsDataContainer.querySelector(`#dept-${deptId}`);

                        if (deptDataElement) {
                            const serviceLinks = deptDataElement.querySelectorAll('a');

                            serviceLinks.forEach(link => {
                                const serviceName = link.getAttribute('data-name');
                                const serviceUrl = link.getAttribute('href');
                                const isDisabled = link.getAttribute('data-disabled') === 'true';

                                // Create new link element for the modal list
                                const newLink = document.createElement('a');
                                newLink.textContent = serviceName;
                                newLink.className = 'serviceLink';

                                // If service is disabled
                                if (isDisabled) {
                                    newLink.classList.add('disabled-service');
                                    newLink.href = 'javascript:void(0)';

                                    // Apply inline styles directly
                                    newLink.style.opacity = '0.4';
                                    newLink.style.cursor = 'not-allowed';
                                    newLink.style.pointerEvents = 'none';
                                    newLink.style.transition = 'none';

                                    newLink.addEventListener('click', function(e) {
                                        e.preventDefault();
                                        e.stopPropagation();
                                        alert('This service is temporarily unavailable. Please try again later.');
                                        return false;
                                    });
                                } else {
                                    newLink.href = serviceUrl;
                                }

                                modalServiceList.appendChild(newLink);
                            });
                        }

                        modalBackdrop.style.display = 'flex';
                    });
                });

                // Re-attach close listeners
                modalCloseButton.addEventListener('click', function() {
                    modalBackdrop.style.display = 'none';
                });

                modalBackdrop.addEventListener('click', function() {
                    modalBackdrop.style.display = 'none';
                });

                modal.addEventListener('click', function(event) {
                    event.stopPropagation();
                });

            }, 100);
        });
    </script>
}
